import org.ultramine.gradle.task.*

buildscript {
	ext.kotlin_version = '1.9.10'
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'kotlin'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
	maven {
		name = 'forge'
		url = 'https://maven.minecraftforge.net'
	}
	maven {
		name = 'minecraft'
		url = 'https://libraries.minecraft.net/'
	}
	maven {
		name = 'sponge'
		url = 'https://repo.spongepowered.org/maven'
	}
	maven {
		name = 'sonatypeSnapshot'
		url = 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
}

dependencies {
	implementation project(":launchwrapper")
	implementation 'com.google.code.findbugs:jsr305:1.3.9'
	implementation 'org.ow2.asm:asm-debug-all:5.0.3'
	implementation 'com.typesafe.akka:akka-actor_2.11:2.3.3'
	implementation 'com.typesafe:config:1.2.1'
	implementation 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
	implementation 'org.scala-lang:scala-compiler:2.11.1'
	implementation 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
	implementation 'org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2'
	implementation 'org.scala-lang:scala-library:2.11.1'
	implementation 'org.scala-lang:scala-parser-combinators:2.11.0-M4'
	implementation 'org.scala-lang:scala-reflect:2.11.1'
	implementation 'org.scala-lang:scala-swing:2.11.0-M4'
	implementation 'org.scala-lang:scala-xml:2.11.0-M4'
	implementation 'net.sf.jopt-simple:jopt-simple:4.5'
	implementation 'lzma:lzma:0.0.1'
	implementation 'com.mojang:realms:1.3.5'
	implementation 'org.apache.commons:commons-compress:1.8.1'
	implementation 'org.apache.httpcomponents:httpclient:4.3.3'
	implementation 'commons-logging:commons-logging:1.1.3'
	implementation 'org.apache.httpcomponents:httpcore:4.3.2'
	implementation 'java3d:vecmath:1.3.1'
	implementation 'net.sf.trove4j:trove4j:3.0.3'
	implementation 'com.ibm.icu:icu4j-core-mojang:51.2'
	implementation 'com.paulscode:codecjorbis:20101023'
	implementation 'com.paulscode:codecwav:20101023'
	implementation 'com.paulscode:libraryjavasound:20101123'
	implementation 'com.paulscode:librarylwjglopenal:20100824'
	implementation 'com.paulscode:soundsystem:20120107'
	implementation 'io.netty:netty-all:4.0.10.Final'
	implementation 'com.google.guava:guava:17.0'
	implementation 'org.apache.commons:commons-lang3:3.3.2'
	implementation 'commons-io:commons-io:2.4'
	implementation 'commons-codec:commons-codec:1.9'
	implementation 'net.java.jinput:jinput:2.0.5'
	implementation 'net.java.jutils:jutils:1.0.0'
	implementation 'com.google.code.gson:gson:2.2.4'
	implementation 'com.mojang:authlib:1.5.16'
	implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
	implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
	implementation 'org.lwjgl.lwjgl:lwjgl:2.9.1'
	implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.1'
	implementation 'tv.twitch:twitch:5.16'
	implementation 'org.yaml:snakeyaml:1.16'
	implementation 'com.lmax:disruptor:3.2.1'
	implementation 'org.apache.commons:commons-dbcp2:2.1.1'
	implementation 'net.openhft:koloboke-api-jdk8:0.6.8'
	implementation 'jline:jline:2.13'
	implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
	implementation 'net.openhft:koloboke-impl-jdk8:0.6.8'
	implementation 'mysql:mysql-connector-java:5.1.14'
	implementation 'commons-lang:commons-lang:2.6'
	implementation 'org.avaje:ebean:2.7.7'
	implementation('com.googlecode.json-simple:json-simple:1.1.1') {
		exclude module: 'junit'
	}
	implementation 'org.xerial:sqlite-jdbc:3.18.0'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}


tasks.register('copyLibraries', Copy) {
	outputs.upToDateWhen { false }
	into(buildDir)
	configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.collect {
		def moduleVersion = it.moduleVersion
		from(it.file) {
			into("libraries/${moduleVersion.id.group.replace('.', '/')}/${moduleVersion.id.name}/${moduleVersion.id.version}/")
		}
	}
}

tasks.register('packageLibraries', Zip) {
	dependsOn copyLibraries
	outputs.upToDateWhen { false }
	setArchiveName("libraries.zip")
	setDestinationDir(file("$buildDir/distributions"))
	from("$buildDir/libraries")
}

tasks.register('injectVersion', SpeicialClassTransformTask) {
	dependsOn tasks.compileJava
	inputDir = tasks.compileJava.destinationDir
	replace {
		replaceIn 'net.minecraftforge.common.ForgeModContainer'
		replace '@FORGE@', "Forge"
	}
}


tasks.register('reobf', ReobfTask) {
	dependsOn tasks.compileJava, tasks.injectVersion
	classpath = sourceSets.main.compileClasspath;
	addSrg('conf/mcp2notch.srg')
	inputDir = tasks.compileJava.destinationDir
	overrideInputDir = tasks.injectVersion.outputDir
}

tasks.register('processServerResources', ProcessResources) {
	from sourceSets.main.resources.srcDirs
	into new File(buildDir, 'resources_server')
	exclude 'assets/minecraft/font'
	exclude 'assets/minecraft/shaders'
	exclude 'assets/minecraft/texts'
	exclude 'assets/minecraft/textures'
	exclude 'assets/fml/textures'
}

tasks.register('processClientResources', ProcessResources) {
	from sourceSets.main.resources.srcDirs
	into new File(buildDir, 'resources_client')
	exclude 'org/ultramine/defaults'
}

tasks.register('sidesplit', SideSplitTask) {
	dependsOn tasks.reobf
	inputDir = tasks.reobf.outputDir
}

tasks.register('jar_client', Jar) {
	dependsOn(tasks.sidesplit, tasks.processClientResources)
	from fileTree(tasks.sidesplit.getClientClasses()), tasks.processClientResources
	setDestinationDir(file("$buildDir/distributions"))
	setArchiveName("Minecraft.jar")
}

tasks.build.dependsOn tasks.reobf, tasks.jar_client, tasks.packageLibraries

defaultTasks 'build'